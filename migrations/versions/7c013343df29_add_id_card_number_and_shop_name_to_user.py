"""Add id_card_number and shop_name to User

Revision ID: 7c013343df29
Revises: add_ownership_history
Create Date: 2025-08-03 10:37:02.773474

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7c013343df29'
down_revision = 'add_ownership_history'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Add columns as nullable first
        batch_op.add_column(sa.Column('id_card_number', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('shop_name', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('can_create_admins', sa.Boolean(), nullable=True))
    
    # Update existing records with dummy data
    import random
    connection = op.get_bind()
    
    # Get all users without id_card_number
    result = connection.execute(sa.text("SELECT id, username FROM user WHERE id_card_number IS NULL"))
    users = result.fetchall()
    
    for user in users:
        # Generate unique dummy ID card number
        unique_id = f"99999-{random.randint(1000000, 9999999)}-{random.randint(1, 9)}"
        
        # Check if user is shopkeeper and add dummy shop name
        is_shopkeeper_result = connection.execute(sa.text("SELECT is_shopkeeper FROM user WHERE id = :user_id"), {'user_id': user[0]})
        is_shopkeeper = is_shopkeeper_result.fetchone()[0]
        
        shop_name = f"Shop of {user[1]}" if is_shopkeeper else None
        
        connection.execute(
            sa.text("UPDATE user SET id_card_number = :id_card, shop_name = :shop_name, can_create_admins = :can_create WHERE id = :user_id"),
            {
                'id_card': unique_id,
                'shop_name': shop_name,
                'can_create': False,  # Default to False, main admin will be set separately
                'user_id': user[0]
            }
        )
    
    # Now make id_card_number NOT NULL and add unique constraint
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('id_card_number', nullable=False)
        batch_op.create_unique_constraint('uq_user_id_card_number', ['id_card_number'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint('uq_user_id_card_number', type_='unique')
        batch_op.drop_column('can_create_admins')
        batch_op.drop_column('shop_name')
        batch_op.drop_column('id_card_number')

    # ### end Alembic commands ###
